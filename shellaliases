#!/bin/sh

function tmux-sess() {
	read -r -d '' USAGE <<'USAGEEND'
tmux-sess - start a tmux session
Options:
    -h          This help text.
    -f <file>   Tmux config file to use (default: ~/.tmux.conf).
    -s <name>   Socket/session name to use.
    -n          Start a new session that joins the existing session.
USAGEEND

	CONF=$HOME/.tmux.conf
	SESS=main
	NEWSESS=
	while getopts hnf:s: flag; do
	    case $flag in
	        h|\?)
	            echo "$USAGE"; exit;;
	        f)
	            CONF=$OPTARG;;
	        s)
	            SESS=$OPTARG;;
	        n)
	            NEWSESS=1;;
	    esac
	done

	if [[ -n $NEWSESS ]]; then
	    tmux -L $SESS -f $CONF new -t $SESS
	else
	    tmux -L $SESS -f $CONF att -t $SESS -d ||
	    tmux -L $SESS -f $CONF new -s $SESS
	fi
}

function tmux-home() {
  tmux-sess -s home -f ~/.tmux.master $*
}

function pwg() {
  num=4
  special=0
  if [[ "${1}x" != "x" ]] ; then
    num=$1
  fi
  if [[ "${2}x" != "x" ]] ; then
    special=$2
  fi
  diceware -d - -n $num -s $special
}


alias pram.reset='sudo nvram boot-args=”-p -r”'
alias brew.update='brew update && brew upgrade && brew cleanup'
alias brew.caskupdate='brew update && brew upgrade brew-cask && brew cleanup && brew cask cleanup'
alias osx.update='sudo softwareupdate -i -a'
alias pathogen.update='curl -LSso ~/.dotfiles/vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim'

alias timemachine.enablelocalversions='sudo tmutil enablelocal'
alias timemachine.disablelocalversions='sudo tmutil disablelocal'
alias timemachine.snapshot='tmutil localsnapshot'
alias timemachine.list.snapshots='tmutil listlocalsnapshotdates /'

alias scdaemon.reload='gpgconf --reload scdaemon'

# Get week number
alias week='date +%V'
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

# Flush the DNS on Mac
function network.dnsflush() {
  sudo dscacheutil -flushcache
  sudo killall -HUP mDNSResponder
}

# Copy and paste and prune the usless newline
alias pbcopynn='tr -d "\n" | pbcopy'
alias pbclean='pbpaste | pbcopy' # Remove any formatting from clipboard

# Set the extended MacOS attributes on a file such that Quicklook will open it as text
alias finder.astext='xattr -wx com.apple.FinderInfo "54 45 58 54 21 52 63 68 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00" $1'

# Recursively delete `.DS_Store` files
alias osx.cleanup="find . -type f -name '*.DS_Store' -ls -delete"

# Empty the Trash on all mounted volumes and the main HDD
# Also, clear Apple’s System Logs to improve shell startup speed
alias osx.emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"
alias osx.show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias osx.hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
# Hide/show all desktop icons (useful when presenting)
alias osx.hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias osx.showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

function osx.sethostname() {
  sudo scutil --set HostName "${1}"
  sudo scutil --set LocalHostName
  sudo scutil --set ComputerName "${1}"
}

# Show network connections
# Often useful to prefix with SUDO to see more system level network usage
alias network.connections='lsof -l -i +L -R -V'
alias network.established='lsof -l -i +L -R -V | grep ESTABLISHED'
alias network.internalip="ifconfig en0 | egrep -o '([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)'"
alias network.externalip='curl -s ipinfo.io | jq -r .ip'

# Files used, anywhere on the filesystem
alias files.usage='sudo fs_usage -e -f filesystem|grep -v CACHE_HIT|grep -v grep'
# Files being opened
alias files.open='sudo fs_usage -e -f filesystem|grep -v CACHE_HIT|grep -v grep|grep open'
# Files in use in the Users directory
alias files.usage.user='sudo fs_usage -e -f filesystem|grep -v CACHE_HIT|grep -v grep|grep Users'

# Directory listings
# LS_COLORS='no=01;37:fi=01;37:di=07;96:ln=01;36:pi=01;32:so=01;35:do=01;35:bd=01;33:cd=01;33:ex=01;31:mi=00;05;37:or=00;05;37:'
# -G Add colors to ls
# -l Long format
# -h Short size suffixes (B, K, M, G, P)
# -p Postpend slash to folders
if [ "$(uname -s)" = "OpenBSD" -o "$(uname -n)" = "alpine" ] ; then
  alias ls='ls -h -p '
  alias ll='ls -l -h -p '
else
  alias ls='ls -G -h -p '
  alias ll='ls -l -G -h -p '
fi
alias mmv='noglob zmv -W'

#########################################
# Utility Functions

# Create a new git repo with one README commit and CD into it
function git.nr() { mkdir $1; cd $1; git init; touch README; git add README; git commit -m 'initial commit';}

# Use Mac OSX Preview to open a man page in a more handsome format
function manp() {
  man -t $1 | open -f -a /Applications/Preview.app
}

# Get (cache) all Cheat sheets
function cheat.getall() {
	cheat sheets | grep '^  ' | xargs -n 1 -I {} bash -c 'cheat {} | :'
}

function find.name() {
  wild=\'\*$1\*\'
  sh -c "find . -iname $wild"
}

alias lessc='less -R' # Lets color escape sequences carry through to less
alias morec='more -R'
alias lesscolor='less -R'
alias morecolor='more -R'

function screenshot.setjpg() {
    defaults write com.apple.screencapture type jpg
    killall SystemUIServer
}

function screenshot.setpng() {
    defaults write com.apple.screencapture type png
	killall SystemUIServer
}

function gi() {
	curl -s https://www.gitignore.io/api/$@ ;
}

# Logout from GUI and terminal
function logout_all() {
  osascript -e 'tell application "System Events" to log out'
  builtin logout
}

# Quick way to rebuild the Launch Services database and get rid
# of duplicates in the Open With submenu.
alias fixopenwith='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user'

# alias for adding wakeonlan roughly..
alias addwakeonlan="awk '{print $1, $4, $2}' | sed 's/[()]//g' | while read line  ; do name=`echo $line | awk '{print $1}'` ; content=`echo $line | awk '{print $2, $3}'` ; echo $content > .wakeonlan/$name ; done"

# Find Raspberry Pi on the network
[ `uname -s` = "Linux" ] && lan_interface="eth0"
[ `uname -s` = "Linux" ] && wifi_interface="wlan0"
[ `uname -s` = "Darwin" ] && lan_interface="en0"
[ `uname -s` = "Darwin" ] && wifi_interface="en1"
alias find_pi="sudo /usr/local/bin/arp-scan --interface=$lan_interface --localnet | grep b8:27:eb"
alias find_pi_wifi="sudo /usr/local/bin/arp-scan --interface=$wifi_interface --localnet | grep b8:27:eb"

# sshfs mounts
function mount_ssh () {
  if [ $# -eq 0 ] ; then
    echo "Please supply a host"
    return
  fi
  mkdir ~/${1} &> /dev/null
  sshfs -p 22 ${1}: ~/${1} -oauto_cache,reconnect,defer_permissions,noappledouble,negative_vncache,volname=${1}
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'title' 'body'` or `echo 'body' | note`
# Title is optional
function note() {
	local title
	local body
	if [ -t 0 ]; then
		title="$1"
		body="$2"
	else
		title=$(cat)
	fi
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$title", body:"$title" & "<br><br>" & "$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Manually remove a downloaded app or file from the quarantine
function unquarantine() {
	for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
		xattr -r -d "$attribute" "$@"
	done
}


# Stuff I never really use but cannot delete either because of http://xkcd.com/530/
alias stfu="osascript -e 'set volume output muted true'"
alias pumpitup="osascript -e 'set volume 7'"
alias hax="noti -t 'System error' -m 'WTF R U DOIN'"


function kconf() {
	local KUBECONFIGS=$HOME/.kube/configs
	local cfg=$1
	if [ -z "$1" ] ; then
		local cfg=$(find "${KUBECONFIGS}" -type f -name "kubeconfig-*.yml" -exec basename {} \; | gsed -rn 's/kubeconfig-(.*)\.yml$/\1/p' | fzf)
	fi
	export KUBECONFIG=$HOME/.kube/configs/kubeconfig-${cfg}.yml
	echo "activated $cfg"
}

function kn() {
	local ns=$1
	if [ -z "$1" ] ; then
		local ns=$(kubectl get namespace -o json | jq '.items[].metadata.name' -r | fzf)
	fi
	kubectl config set-context --current --namespace $ns
	echo "activated $ns"
}

alias kc="kconf"
alias k=kubectl

# Go function for testing with colors
function test.color() {
	sed -u -r "
		s#PASS#`printf "\033[32m"`PASS`printf "\033[0m"`#g
		s#FAIL#`printf "\033[31m"`FAIL`printf "\033[0m"`#g
		s#\"(config|app|group|msg|keyspace)\":#\"`printf "\033[37m"`\1`printf "\033[0m"`\":#g
		s#\"(namespace|subsystem)\":#\"`printf "\033[1;34m"`\1`printf "\033[0m"`\":#g
		s#\"(event)\":#\"`printf "\033[34m"`\1`printf "\033[0m"`\":#g
		s#\"(level)\":#\"`printf "\033[35m"`\1`printf "\033[0m"`\":#g
		s#\"(error)\":#\"`printf "\033[31m"`\1`printf "\033[0m"`\":#g
		s#\"(warn)\":#\"`printf "\033[33m"`\1`printf "\033[0m"`\":#g
		s#\"(test)\":#\"`printf "\033[36m"`\1`printf "\033[0m"`\":#g
		s#\"(ts)\":#\"`printf "\033[1;35m"`\1`printf "\033[0m"`\":#g
		s#\"(from)\":#\"`printf "\033[34m"`\1`printf "\033[0m"`\":#g
	"
}

function test.all() {
	go test -race -v | test.color
}

